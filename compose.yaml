# Modern Docker Compose configuration (no version field needed in Compose v2)
# Base configuration for all environments

name: riot_api_app

services:
  frontend:
    image: riot-api-frontend:latest
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
      target: runner
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      # Use Bake-compatible build configuration
      x-bake:
        tags:
          - riot-api-frontend:latest
        cache-from:
          - type=local,src=/tmp/.buildx-cache
        cache-to:
          - type=local,dest=/tmp/.buildx-cache,mode=max
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    image: riot-api-backend:latest
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
      target: production
      # Use Bake-compatible build configuration
      x-bake:
        tags:
          - riot-api-backend:latest
        cache-from:
          - type=local,src=/tmp/.buildx-cache
        cache-to:
          - type=local,dest=/tmp/.buildx-cache,mode=max
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8000:8000"
    volumes:
      - backend-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:18-alpine
    restart: unless-stopped
    command: postgres -c shared_preload_libraries=pg_stat_statements
    networks:
      - app-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Performance tuning
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Security: run as non-root
    user: postgres

networks:
  app-network:
    driver: bridge
    name: riot_api_app_network

volumes:
  postgres-data:
    name: riot_api_app_postgres_data
  backend-logs:
    name: riot_api_app_backend_logs
