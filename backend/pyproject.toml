[project]
name = "riot-api-backend"
version = "0.1.0"
description = "Riot API backend for player's performance and match history analysis."
authors = [
    {name = "Marek Hovadík", email = "marek.hovadik@seznam.cz"},
    {name = "Matěj Kadlec", email = "mat.kadlec@email.cz"},
]
dependencies = [
    "alembic>=1.17.0",
    "apscheduler>=3.10.4",
    "aiohttp>=3.13.0",
    "asyncpg>=0.30.0",
    "fastapi>=0.118.2",
    "httpx>=0.28.1",
    "psycopg2-binary>=2.9.9",
    "pydantic>=2.12.0",
    "pydantic-settings>=2.7.0",
    "python-dotenv>=1.1.1",
    "python-Levenshtein>=0.25.1",
    "python-multipart>=0.0.20",
    "slowapi>=0.1.9",
    "sqlalchemy>=2.0.43",
    "structlog>=25.4.0",
    "tenacity>=9.1.2",
    "uvicorn[standard]>=0.37.0",
]
requires-python = ">=3.13"
readme = "README.md"
license = {text = "MIT"}

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "black>=25.9.0",
    "isort>=6.1.0",
    "flake8>=7.3.0",
    "mypy>=1.18.2",
    "vulture>=2.14",
]

[tool.black]
line-length = 88
target-version = ['py313']

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.bandit]
exclude_dirs = ["tests", "tools"]
skips = ["B101", "B601", "B104", "B311"]

[tool.pyright]
include = ["app", "main.py"]
exclude = [
    "**/__pycache__",
    "**/.pytest_cache",
    "**/node_modules",
    "**/tests",
    ".venv"
]

pythonVersion = "3.11"
venvPath = "."
venv = ".venv"
typeCheckingMode = "standard"
stubPath = "typings"

# Keep these strict-but-gentle nudges
reportMissingImports = true
reportMissingTypeStubs = "warning"

# Helpful for gradual typing; flip to "error" later in strict areas
reportUnknownArgumentType = "warning"
reportUnknownParameterType = "warning"
reportUnknownVariableType = "error"  # Promoted to error for better type safety
reportUnknownMemberType = "warning"
reportUntypedFunctionDecorator = "warning"
reportUntypedClassDef = "error"  # Promoted to error for better type safety
reportUntypedNamedTuple = "warning"
reportUntypedBaseClass = "warning"

# Strict typing for high-value areas
strict = [
    "app/algorithms/**/*.py",
    "app/services/**/*.py",
    "app/models/**/*.py",
    "app/config.py",
    "app/database.py",
    "app/schemas/**/*.py"
]

[tool.vulture]
# Find dead/unused Python code with 60% confidence threshold
# This catches more potential dead code but may have false positives
# Review the findings and add exclusions or whitelist as needed
exclude = [
    ".venv/",
    "__pycache__/",
    "*.pyc",
    "app/models/",  # SQLAlchemy ORM fields appear unused but are accessed by framework
    "app/schemas/",  # Pydantic fields appear unused but are used for serialization
    "app/algorithms/",  # Dataclass fields appear unused but are used by framework
    "app/tests/",  # Test fixtures and mocks often appear unused
    "app/riot_api/constants.py",  # Enum definitions used as constants
    "app/riot_api/models.py",  # Pydantic DTO fields from Riot API
]
ignore_decorators = ["@app.route", "@router.*", "@app.*", "@abstractmethod"]
ignore_names = [
    "test_*",
    "setUp",
    "tearDown",
    # Context manager protocol parameters
    "exc_type",
    "exc_val",
    "exc_tb",
    # Pydantic configuration
    "model_config",
    # CircuitBreaker method used for failure handling
    "on_failure",
    # SQLAlchemy ORM fields accessed indirectly by transformers
    "riot_id_name",
    "riot_id_tagline",
]
min_confidence = 60
paths = ["app/"]
# sort_by_size = true  # Uncomment to sort by size
