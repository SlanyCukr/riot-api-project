"""Initial schema

Revision ID: ad5ad0661dc8
Revises: 
Create Date: 2025-09-29 19:53:28.799120

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'ad5ad0661dc8'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('matches',
    sa.Column('match_id', sa.String(length=64), nullable=False, comment='Unique match identifier from Riot API'),
    sa.Column('platform_id', sa.String(length=8), nullable=False, comment='Platform where the match was played (e.g., EUW1, EUN1)'),
    sa.Column('game_creation', sa.BigInteger(), nullable=False, comment='Game creation timestamp in milliseconds since epoch'),
    sa.Column('game_duration', sa.Integer(), nullable=False, comment='Game duration in seconds'),
    sa.Column('queue_id', sa.Integer(), nullable=False, comment='Queue type ID (e.g., 420=Ranked Solo, 440=Ranked Flex)'),
    sa.Column('game_version', sa.String(length=32), nullable=False, comment="Game version (e.g., '14.20.555.5555')"),
    sa.Column('map_id', sa.Integer(), nullable=False, comment="Map ID (e.g., 11=Summoner's Rift)"),
    sa.Column('game_mode', sa.String(length=32), nullable=True, comment="Game mode (e.g., 'CLASSIC', 'ARAM')"),
    sa.Column('game_type', sa.String(length=32), nullable=True, comment="Game type (e.g., 'MATCHED_GAME')"),
    sa.Column('game_end_timestamp', sa.BigInteger(), nullable=True, comment='Game end timestamp in milliseconds since epoch'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this match record was created in our database'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this match record was last updated'),
    sa.Column('tournament_id', sa.String(length=64), nullable=True, comment='Tournament ID if this is a tournament match'),
    sa.Column('is_processed', sa.Boolean(), nullable=False, comment='Whether this match has been processed for smurf detection'),
    sa.Column('processing_error', sa.String(length=256), nullable=True, comment='Error message if match processing failed'),
    sa.PrimaryKeyConstraint('match_id', name=op.f('pk_matches'))
    )
    op.create_index('idx_matches_platform_creation', 'matches', ['platform_id', 'game_creation'], unique=False)
    op.create_index('idx_matches_processed_error', 'matches', ['is_processed', 'processing_error'], unique=False)
    op.create_index('idx_matches_queue_creation', 'matches', ['queue_id', 'game_creation'], unique=False)
    op.create_index('idx_matches_version_creation', 'matches', ['game_version', 'game_creation'], unique=False)
    op.create_index(op.f('ix_matches_game_creation'), 'matches', ['game_creation'], unique=False)
    op.create_index(op.f('ix_matches_game_mode'), 'matches', ['game_mode'], unique=False)
    op.create_index(op.f('ix_matches_game_type'), 'matches', ['game_type'], unique=False)
    op.create_index(op.f('ix_matches_game_version'), 'matches', ['game_version'], unique=False)
    op.create_index(op.f('ix_matches_is_processed'), 'matches', ['is_processed'], unique=False)
    op.create_index(op.f('ix_matches_match_id'), 'matches', ['match_id'], unique=False)
    op.create_index(op.f('ix_matches_platform_id'), 'matches', ['platform_id'], unique=False)
    op.create_index(op.f('ix_matches_queue_id'), 'matches', ['queue_id'], unique=False)
    op.create_index(op.f('ix_matches_tournament_id'), 'matches', ['tournament_id'], unique=False)
    op.create_table('players',
    sa.Column('puuid', sa.UUID(), nullable=False, comment="Player's universally unique identifier from Riot API"),
    sa.Column('riot_id', sa.String(length=128), nullable=True, comment="Player's Riot ID (game name)"),
    sa.Column('tag_line', sa.String(length=8), nullable=True, comment="Player's tag line (region identifier)"),
    sa.Column('summoner_name', sa.String(length=32), nullable=True, comment='Current summoner name (can change)'),
    sa.Column('platform', sa.String(length=8), nullable=False, comment='Platform where the player was last seen (e.g., EUW1, EUN1)'),
    sa.Column('account_level', sa.Integer(), nullable=True, comment="Player's account level"),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this player record was first created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this player record was last updated'),
    sa.Column('last_seen', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this player was last seen in a match'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether this player record is active (not deleted)'),
    sa.Column('profile_icon_id', sa.Integer(), nullable=True, comment='Profile icon ID'),
    sa.Column('summoner_id', sa.String(length=64), nullable=True, comment='Encrypted summoner ID (used for some Riot API endpoints)'),
    sa.PrimaryKeyConstraint('puuid', name=op.f('pk_players'))
    )
    op.create_index('idx_players_last_seen_active', 'players', ['last_seen', 'is_active'], unique=False)
    op.create_index('idx_players_riot_tag', 'players', ['riot_id', 'tag_line'], unique=False)
    op.create_index('idx_players_summoner_platform', 'players', ['summoner_name', 'platform'], unique=False)
    op.create_index(op.f('ix_players_is_active'), 'players', ['is_active'], unique=False)
    op.create_index(op.f('ix_players_last_seen'), 'players', ['last_seen'], unique=False)
    op.create_index(op.f('ix_players_platform'), 'players', ['platform'], unique=False)
    op.create_index(op.f('ix_players_puuid'), 'players', ['puuid'], unique=False)
    op.create_index(op.f('ix_players_riot_id'), 'players', ['riot_id'], unique=False)
    op.create_index(op.f('ix_players_summoner_id'), 'players', ['summoner_id'], unique=False)
    op.create_index(op.f('ix_players_summoner_name'), 'players', ['summoner_name'], unique=False)
    op.create_table('match_participants',
    sa.Column('id', sa.BigInteger(), nullable=False, comment='Auto-incrementing primary key'),
    sa.Column('match_id', sa.String(length=64), nullable=False, comment='Reference to the match this participant belongs to'),
    sa.Column('puuid', sa.UUID(), nullable=False, comment='Reference to the player'),
    sa.Column('summoner_name', sa.String(length=32), nullable=False, comment='Summoner name at the time of the match'),
    sa.Column('team_id', sa.Integer(), nullable=False, comment='Team ID (100 for blue side, 200 for red side)'),
    sa.Column('champion_id', sa.Integer(), nullable=False, comment='Champion ID played by the participant'),
    sa.Column('champion_name', sa.String(length=32), nullable=False, comment='Champion name played by the participant'),
    sa.Column('kills', sa.Integer(), nullable=False, comment='Number of kills'),
    sa.Column('deaths', sa.Integer(), nullable=False, comment='Number of deaths'),
    sa.Column('assists', sa.Integer(), nullable=False, comment='Number of assists'),
    sa.Column('win', sa.Boolean(), nullable=False, comment='Whether the participant won the match'),
    sa.Column('gold_earned', sa.Integer(), nullable=False, comment='Total gold earned'),
    sa.Column('vision_score', sa.Integer(), nullable=False, comment='Vision score'),
    sa.Column('cs', sa.Integer(), nullable=False, comment='Total creep score (minions killed)'),
    sa.Column('kda', sa.Numeric(precision=5, scale=2), nullable=True, comment='Kill-death-assist ratio'),
    sa.Column('champ_level', sa.Integer(), nullable=False, comment='Champion level achieved'),
    sa.Column('total_damage_dealt', sa.BigInteger(), nullable=False, comment='Total damage dealt'),
    sa.Column('total_damage_dealt_to_champions', sa.BigInteger(), nullable=False, comment='Total damage dealt to champions'),
    sa.Column('total_damage_taken', sa.BigInteger(), nullable=False, comment='Total damage taken'),
    sa.Column('total_heal', sa.BigInteger(), nullable=False, comment='Total healing done'),
    sa.Column('individual_position', sa.String(length=16), nullable=True, comment="Individual position (e.g., 'TOP', 'JUNGLE', 'MIDDLE', 'BOTTOM', 'UTILITY')"),
    sa.Column('team_position', sa.String(length=16), nullable=True, comment='Team position'),
    sa.Column('role', sa.String(length=16), nullable=True, comment="Role (e.g., 'DUO', 'DUO_CARRY', 'DUO_SUPPORT', 'SUPPORT')"),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this participant record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this participant record was last updated'),
    sa.ForeignKeyConstraint(['match_id'], ['matches.match_id'], name=op.f('fk_match_participants_match_id_matches'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['puuid'], ['players.puuid'], name=op.f('fk_match_participants_puuid_players'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_match_participants'))
    )
    op.create_index('idx_participants_champion_win', 'match_participants', ['champion_id', 'win'], unique=False)
    op.create_index('idx_participants_kills_deaths', 'match_participants', ['kills', 'deaths'], unique=False)
    op.create_index('idx_participants_match_puuid', 'match_participants', ['match_id', 'puuid'], unique=False)
    op.create_index('idx_participants_position_champion', 'match_participants', ['individual_position', 'champion_id'], unique=False)
    op.create_index('idx_participants_team_win', 'match_participants', ['team_id', 'win'], unique=False)
    op.create_index(op.f('ix_match_participants_champion_id'), 'match_participants', ['champion_id'], unique=False)
    op.create_index(op.f('ix_match_participants_champion_name'), 'match_participants', ['champion_name'], unique=False)
    op.create_index(op.f('ix_match_participants_individual_position'), 'match_participants', ['individual_position'], unique=False)
    op.create_index(op.f('ix_match_participants_match_id'), 'match_participants', ['match_id'], unique=False)
    op.create_index(op.f('ix_match_participants_puuid'), 'match_participants', ['puuid'], unique=False)
    op.create_index(op.f('ix_match_participants_role'), 'match_participants', ['role'], unique=False)
    op.create_index(op.f('ix_match_participants_team_id'), 'match_participants', ['team_id'], unique=False)
    op.create_index(op.f('ix_match_participants_team_position'), 'match_participants', ['team_position'], unique=False)
    op.create_table('player_ranks',
    sa.Column('id', sa.Integer(), nullable=False, comment='Auto-incrementing primary key'),
    sa.Column('puuid', sa.UUID(), nullable=False, comment='Reference to the player'),
    sa.Column('queue_type', sa.String(length=32), nullable=False, comment='Queue type (e.g., RANKED_SOLO_5x5, RANKED_FLEX_SR)'),
    sa.Column('tier', sa.String(length=16), nullable=False, comment='Rank tier (e.g., GOLD, PLATINUM, DIAMOND)'),
    sa.Column('rank', sa.String(length=4), nullable=True, comment='Rank division (I, II, III, IV)'),
    sa.Column('league_points', sa.Integer(), nullable=False, comment='League points (0-100)'),
    sa.Column('wins', sa.Integer(), nullable=False, comment='Number of wins in this queue'),
    sa.Column('losses', sa.Integer(), nullable=False, comment='Number of losses in this queue'),
    sa.Column('veteran', sa.Boolean(), nullable=False, comment='Whether the player is a veteran'),
    sa.Column('inactive', sa.Boolean(), nullable=False, comment='Whether the player is inactive'),
    sa.Column('fresh_blood', sa.Boolean(), nullable=False, comment='Whether the player is fresh blood'),
    sa.Column('hot_streak', sa.Boolean(), nullable=False, comment='Whether the player is on a hot streak'),
    sa.Column('league_id', sa.String(length=64), nullable=True, comment='League ID'),
    sa.Column('league_name', sa.String(length=64), nullable=True, comment='League name'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this rank record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this rank record was last updated'),
    sa.Column('season_id', sa.String(length=16), nullable=True, comment='Season identifier'),
    sa.Column('is_current', sa.Boolean(), nullable=False, comment='Whether this is the current rank for the player'),
    sa.ForeignKeyConstraint(['puuid'], ['players.puuid'], name=op.f('fk_player_ranks_puuid_players'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_player_ranks'))
    )
    op.create_index('idx_ranks_puuid_current', 'player_ranks', ['puuid', 'is_current'], unique=False)
    op.create_index('idx_ranks_puuid_queue', 'player_ranks', ['puuid', 'queue_type'], unique=False)
    op.create_index('idx_ranks_queue_current', 'player_ranks', ['queue_type', 'is_current'], unique=False)
    op.create_index('idx_ranks_tier_lp', 'player_ranks', ['tier', 'league_points'], unique=False)
    op.create_index('idx_ranks_tier_rank', 'player_ranks', ['tier', 'rank'], unique=False)
    op.create_index(op.f('ix_player_ranks_is_current'), 'player_ranks', ['is_current'], unique=False)
    op.create_index(op.f('ix_player_ranks_league_id'), 'player_ranks', ['league_id'], unique=False)
    op.create_index(op.f('ix_player_ranks_puuid'), 'player_ranks', ['puuid'], unique=False)
    op.create_index(op.f('ix_player_ranks_queue_type'), 'player_ranks', ['queue_type'], unique=False)
    op.create_index(op.f('ix_player_ranks_rank'), 'player_ranks', ['rank'], unique=False)
    op.create_index(op.f('ix_player_ranks_season_id'), 'player_ranks', ['season_id'], unique=False)
    op.create_index(op.f('ix_player_ranks_tier'), 'player_ranks', ['tier'], unique=False)
    op.create_table('smurf_detections',
    sa.Column('id', sa.Integer(), nullable=False, comment='Auto-incrementing primary key'),
    sa.Column('puuid', sa.UUID(), nullable=False, comment='Reference to the player being analyzed'),
    sa.Column('is_smurf', sa.Boolean(), nullable=False, comment='Whether the player is detected as a smurf'),
    sa.Column('confidence', sa.String(length=16), nullable=True, comment='Confidence level in the smurf detection'),
    sa.Column('smurf_score', sa.Numeric(precision=5, scale=3), nullable=False, comment='Overall smurf score (0.0-1.0)'),
    sa.Column('win_rate_score', sa.Numeric(precision=5, scale=3), nullable=True, comment='Win rate based smurf score component'),
    sa.Column('kda_score', sa.Numeric(precision=5, scale=3), nullable=True, comment='KDA based smurf score component'),
    sa.Column('account_level_score', sa.Numeric(precision=5, scale=3), nullable=True, comment='Account level based smurf score component'),
    sa.Column('rank_discrepancy_score', sa.Numeric(precision=5, scale=3), nullable=True, comment='Rank discrepancy based smurf score component'),
    sa.Column('games_analyzed', sa.Integer(), nullable=False, comment='Number of games analyzed for this detection'),
    sa.Column('queue_type', sa.String(length=32), nullable=True, comment='Queue type analyzed (e.g., RANKED_SOLO_5x5)'),
    sa.Column('time_period_days', sa.Integer(), nullable=True, comment='Time period in days analyzed'),
    sa.Column('win_rate_threshold', sa.Numeric(precision=5, scale=3), nullable=True, comment='Win rate threshold used for detection'),
    sa.Column('kda_threshold', sa.Numeric(precision=5, scale=3), nullable=True, comment='KDA threshold used for detection'),
    sa.Column('account_level', sa.Integer(), nullable=True, comment='Account level at time of analysis'),
    sa.Column('current_tier', sa.String(length=16), nullable=True, comment='Current tier at time of analysis'),
    sa.Column('current_rank', sa.String(length=4), nullable=True, comment='Current rank at time of analysis'),
    sa.Column('peak_tier', sa.String(length=16), nullable=True, comment='Peak tier observed'),
    sa.Column('peak_rank', sa.String(length=4), nullable=True, comment='Peak rank observed'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this smurf detection was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this smurf detection was last updated'),
    sa.Column('last_analysis', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the last analysis was performed'),
    sa.Column('analysis_version', sa.String(length=16), nullable=True, comment='Version of the smurf detection algorithm'),
    sa.Column('false_positive_reported', sa.Boolean(), nullable=False, comment='Whether this detection was reported as false positive'),
    sa.Column('manually_verified', sa.Boolean(), nullable=False, comment='Whether this detection was manually verified'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Additional notes about this detection'),
    sa.ForeignKeyConstraint(['puuid'], ['players.puuid'], name=op.f('fk_smurf_detections_puuid_players'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_smurf_detections'))
    )
    op.create_index('idx_smurf_detection_analysis_time', 'smurf_detections', ['last_analysis', 'is_smurf'], unique=False)
    op.create_index('idx_smurf_detection_false_positive', 'smurf_detections', ['false_positive_reported', 'is_smurf'], unique=False)
    op.create_index('idx_smurf_detection_is_smurf_score', 'smurf_detections', ['is_smurf', 'smurf_score'], unique=False)
    op.create_index('idx_smurf_detection_puuid_confidence', 'smurf_detections', ['puuid', 'confidence'], unique=False)
    op.create_index('idx_smurf_detection_queue_score', 'smurf_detections', ['queue_type', 'smurf_score'], unique=False)
    op.create_index(op.f('ix_smurf_detections_confidence'), 'smurf_detections', ['confidence'], unique=False)
    op.create_index(op.f('ix_smurf_detections_false_positive_reported'), 'smurf_detections', ['false_positive_reported'], unique=False)
    op.create_index(op.f('ix_smurf_detections_is_smurf'), 'smurf_detections', ['is_smurf'], unique=False)
    op.create_index(op.f('ix_smurf_detections_last_analysis'), 'smurf_detections', ['last_analysis'], unique=False)
    op.create_index(op.f('ix_smurf_detections_manually_verified'), 'smurf_detections', ['manually_verified'], unique=False)
    op.create_index(op.f('ix_smurf_detections_puuid'), 'smurf_detections', ['puuid'], unique=False)
    op.create_index(op.f('ix_smurf_detections_queue_type'), 'smurf_detections', ['queue_type'], unique=False)
    op.create_index(op.f('ix_smurf_detections_smurf_score'), 'smurf_detections', ['smurf_score'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_smurf_detections_smurf_score'), table_name='smurf_detections')
    op.drop_index(op.f('ix_smurf_detections_queue_type'), table_name='smurf_detections')
    op.drop_index(op.f('ix_smurf_detections_puuid'), table_name='smurf_detections')
    op.drop_index(op.f('ix_smurf_detections_manually_verified'), table_name='smurf_detections')
    op.drop_index(op.f('ix_smurf_detections_last_analysis'), table_name='smurf_detections')
    op.drop_index(op.f('ix_smurf_detections_is_smurf'), table_name='smurf_detections')
    op.drop_index(op.f('ix_smurf_detections_false_positive_reported'), table_name='smurf_detections')
    op.drop_index(op.f('ix_smurf_detections_confidence'), table_name='smurf_detections')
    op.drop_index('idx_smurf_detection_queue_score', table_name='smurf_detections')
    op.drop_index('idx_smurf_detection_puuid_confidence', table_name='smurf_detections')
    op.drop_index('idx_smurf_detection_is_smurf_score', table_name='smurf_detections')
    op.drop_index('idx_smurf_detection_false_positive', table_name='smurf_detections')
    op.drop_index('idx_smurf_detection_analysis_time', table_name='smurf_detections')
    op.drop_table('smurf_detections')
    op.drop_index(op.f('ix_player_ranks_tier'), table_name='player_ranks')
    op.drop_index(op.f('ix_player_ranks_season_id'), table_name='player_ranks')
    op.drop_index(op.f('ix_player_ranks_rank'), table_name='player_ranks')
    op.drop_index(op.f('ix_player_ranks_queue_type'), table_name='player_ranks')
    op.drop_index(op.f('ix_player_ranks_puuid'), table_name='player_ranks')
    op.drop_index(op.f('ix_player_ranks_league_id'), table_name='player_ranks')
    op.drop_index(op.f('ix_player_ranks_is_current'), table_name='player_ranks')
    op.drop_index('idx_ranks_tier_rank', table_name='player_ranks')
    op.drop_index('idx_ranks_tier_lp', table_name='player_ranks')
    op.drop_index('idx_ranks_queue_current', table_name='player_ranks')
    op.drop_index('idx_ranks_puuid_queue', table_name='player_ranks')
    op.drop_index('idx_ranks_puuid_current', table_name='player_ranks')
    op.drop_table('player_ranks')
    op.drop_index(op.f('ix_match_participants_team_position'), table_name='match_participants')
    op.drop_index(op.f('ix_match_participants_team_id'), table_name='match_participants')
    op.drop_index(op.f('ix_match_participants_role'), table_name='match_participants')
    op.drop_index(op.f('ix_match_participants_puuid'), table_name='match_participants')
    op.drop_index(op.f('ix_match_participants_match_id'), table_name='match_participants')
    op.drop_index(op.f('ix_match_participants_individual_position'), table_name='match_participants')
    op.drop_index(op.f('ix_match_participants_champion_name'), table_name='match_participants')
    op.drop_index(op.f('ix_match_participants_champion_id'), table_name='match_participants')
    op.drop_index('idx_participants_team_win', table_name='match_participants')
    op.drop_index('idx_participants_position_champion', table_name='match_participants')
    op.drop_index('idx_participants_match_puuid', table_name='match_participants')
    op.drop_index('idx_participants_kills_deaths', table_name='match_participants')
    op.drop_index('idx_participants_champion_win', table_name='match_participants')
    op.drop_table('match_participants')
    op.drop_index(op.f('ix_players_summoner_name'), table_name='players')
    op.drop_index(op.f('ix_players_summoner_id'), table_name='players')
    op.drop_index(op.f('ix_players_riot_id'), table_name='players')
    op.drop_index(op.f('ix_players_puuid'), table_name='players')
    op.drop_index(op.f('ix_players_platform'), table_name='players')
    op.drop_index(op.f('ix_players_last_seen'), table_name='players')
    op.drop_index(op.f('ix_players_is_active'), table_name='players')
    op.drop_index('idx_players_summoner_platform', table_name='players')
    op.drop_index('idx_players_riot_tag', table_name='players')
    op.drop_index('idx_players_last_seen_active', table_name='players')
    op.drop_table('players')
    op.drop_index(op.f('ix_matches_tournament_id'), table_name='matches')
    op.drop_index(op.f('ix_matches_queue_id'), table_name='matches')
    op.drop_index(op.f('ix_matches_platform_id'), table_name='matches')
    op.drop_index(op.f('ix_matches_match_id'), table_name='matches')
    op.drop_index(op.f('ix_matches_is_processed'), table_name='matches')
    op.drop_index(op.f('ix_matches_game_version'), table_name='matches')
    op.drop_index(op.f('ix_matches_game_type'), table_name='matches')
    op.drop_index(op.f('ix_matches_game_mode'), table_name='matches')
    op.drop_index(op.f('ix_matches_game_creation'), table_name='matches')
    op.drop_index('idx_matches_version_creation', table_name='matches')
    op.drop_index('idx_matches_queue_creation', table_name='matches')
    op.drop_index('idx_matches_processed_error', table_name='matches')
    op.drop_index('idx_matches_platform_creation', table_name='matches')
    op.drop_table('matches')
    # ### end Alembic commands ###