"""Add player_analysis table

Revision ID: 1b9da77b35df
Revises: 7dc7d16fed5b
Create Date: 2025-10-26 16:24:58.261959

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "1b9da77b35df"
down_revision: Union[str, Sequence[str], None] = "7dc7d16fed5b"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "player_analysis",
        sa.Column(
            "id", sa.Integer(), nullable=False, comment="Auto-incrementing primary key"
        ),
        sa.Column(
            "puuid",
            sa.String(length=78),
            nullable=False,
            comment="Reference to the player being analyzed (Riot PUUID)",
        ),
        sa.Column(
            "is_smurf",
            sa.Boolean(),
            nullable=False,
            comment="Whether the player is detected as a smurf",
        ),
        sa.Column(
            "confidence",
            sa.String(length=32),
            nullable=True,
            comment="Confidence level in the player analysis",
        ),
        sa.Column(
            "smurf_score",
            sa.Numeric(precision=5, scale=3),
            nullable=False,
            comment="Overall smurf score (0.0-1.0)",
        ),
        sa.Column(
            "win_rate_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Win rate based smurf score component",
        ),
        sa.Column(
            "kda_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="KDA based smurf score component",
        ),
        sa.Column(
            "account_level_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Account level based smurf score component",
        ),
        sa.Column(
            "rank_discrepancy_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Rank discrepancy based smurf score component",
        ),
        sa.Column(
            "rank_progression_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Rank progression based smurf score component",
        ),
        sa.Column(
            "win_rate_trend_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Win rate trend based smurf score component",
        ),
        sa.Column(
            "performance_consistency_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Performance consistency based smurf score component",
        ),
        sa.Column(
            "performance_trends_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Performance trends based smurf score component",
        ),
        sa.Column(
            "role_performance_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Role performance based smurf score component",
        ),
        sa.Column(
            "games_analyzed",
            sa.Integer(),
            nullable=False,
            comment="Number of games analyzed for this detection",
        ),
        sa.Column(
            "queue_type",
            sa.String(length=32),
            nullable=True,
            comment="Queue type analyzed (e.g., RANKED_SOLO_5x5)",
        ),
        sa.Column(
            "time_period_days",
            sa.Integer(),
            nullable=True,
            comment="Time period in days analyzed",
        ),
        sa.Column(
            "win_rate_threshold",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Win rate threshold used for detection",
        ),
        sa.Column(
            "kda_threshold",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="KDA threshold used for detection",
        ),
        sa.Column(
            "account_level",
            sa.Integer(),
            nullable=True,
            comment="Account level at time of analysis",
        ),
        sa.Column(
            "current_tier",
            sa.String(length=16),
            nullable=True,
            comment="Current tier at time of analysis",
        ),
        sa.Column(
            "current_rank",
            sa.String(length=4),
            nullable=True,
            comment="Current rank at time of analysis",
        ),
        sa.Column(
            "peak_tier",
            sa.String(length=16),
            nullable=True,
            comment="Peak tier observed",
        ),
        sa.Column(
            "peak_rank",
            sa.String(length=4),
            nullable=True,
            comment="Peak rank observed",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this player analysis was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this player analysis was last updated",
        ),
        sa.Column(
            "last_analysis",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When the last analysis was performed",
        ),
        sa.Column(
            "analysis_version",
            sa.String(length=16),
            nullable=True,
            comment="Version of the player analysis algorithm",
        ),
        sa.Column(
            "false_positive_reported",
            sa.Boolean(),
            nullable=False,
            comment="Whether this detection was reported as false positive",
        ),
        sa.Column(
            "manually_verified",
            sa.Boolean(),
            nullable=False,
            comment="Whether this detection was manually verified",
        ),
        sa.Column(
            "notes",
            sa.Text(),
            nullable=True,
            comment="Additional notes about this detection",
        ),
        sa.ForeignKeyConstraint(["puuid"], ["core.players.puuid"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        schema="core",
    )
    op.create_index(
        op.f("ix_core_player_analysis_confidence"),
        "player_analysis",
        ["confidence"],
        unique=False,
        schema="core",
    )
    op.create_index(
        op.f("ix_core_player_analysis_false_positive_reported"),
        "player_analysis",
        ["false_positive_reported"],
        unique=False,
        schema="core",
    )
    op.create_index(
        op.f("ix_core_player_analysis_is_smurf"),
        "player_analysis",
        ["is_smurf"],
        unique=False,
        schema="core",
    )
    op.create_index(
        op.f("ix_core_player_analysis_last_analysis"),
        "player_analysis",
        ["last_analysis"],
        unique=False,
        schema="core",
    )
    op.create_index(
        op.f("ix_core_player_analysis_manually_verified"),
        "player_analysis",
        ["manually_verified"],
        unique=False,
        schema="core",
    )
    op.create_index(
        op.f("ix_core_player_analysis_puuid"),
        "player_analysis",
        ["puuid"],
        unique=False,
        schema="core",
    )
    op.create_index(
        op.f("ix_core_player_analysis_queue_type"),
        "player_analysis",
        ["queue_type"],
        unique=False,
        schema="core",
    )
    op.create_index(
        op.f("ix_core_player_analysis_smurf_score"),
        "player_analysis",
        ["smurf_score"],
        unique=False,
        schema="core",
    )
    op.create_index(
        "idx_player_analysis_analysis_time",
        "player_analysis",
        ["last_analysis", "is_smurf"],
        unique=False,
        schema="core",
    )
    op.create_index(
        "idx_player_analysis_false_positive",
        "player_analysis",
        ["false_positive_reported", "is_smurf"],
        unique=False,
        schema="core",
    )
    op.create_index(
        "idx_player_analysis_is_smurf_score",
        "player_analysis",
        ["is_smurf", "smurf_score"],
        unique=False,
        schema="core",
    )
    op.create_index(
        "idx_player_analysis_puuid_confidence",
        "player_analysis",
        ["puuid", "confidence"],
        unique=False,
        schema="core",
    )
    op.create_index(
        "idx_player_analysis_queue_score",
        "player_analysis",
        ["queue_type", "smurf_score"],
        unique=False,
        schema="core",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "idx_player_analysis_queue_score", table_name="player_analysis", schema="core"
    )
    op.drop_index(
        "idx_player_analysis_puuid_confidence",
        table_name="player_analysis",
        schema="core",
    )
    op.drop_index(
        "idx_player_analysis_is_smurf_score",
        table_name="player_analysis",
        schema="core",
    )
    op.drop_index(
        "idx_player_analysis_false_positive",
        table_name="player_analysis",
        schema="core",
    )
    op.drop_index(
        "idx_player_analysis_analysis_time", table_name="player_analysis", schema="core"
    )
    op.drop_index(
        op.f("ix_core_player_analysis_smurf_score"),
        table_name="player_analysis",
        schema="core",
    )
    op.drop_index(
        op.f("ix_core_player_analysis_queue_type"),
        table_name="player_analysis",
        schema="core",
    )
    op.drop_index(
        op.f("ix_core_player_analysis_puuid"),
        table_name="player_analysis",
        schema="core",
    )
    op.drop_index(
        op.f("ix_core_player_analysis_manually_verified"),
        table_name="player_analysis",
        schema="core",
    )
    op.drop_index(
        op.f("ix_core_player_analysis_last_analysis"),
        table_name="player_analysis",
        schema="core",
    )
    op.drop_index(
        op.f("ix_core_player_analysis_is_smurf"),
        table_name="player_analysis",
        schema="core",
    )
    op.drop_index(
        op.f("ix_core_player_analysis_false_positive_reported"),
        table_name="player_analysis",
        schema="core",
    )
    op.drop_index(
        op.f("ix_core_player_analysis_confidence"),
        table_name="player_analysis",
        schema="core",
    )
    op.drop_table("player_analysis", schema="core")
    # ### end Alembic commands ###
