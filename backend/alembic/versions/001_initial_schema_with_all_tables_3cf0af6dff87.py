"""001_initial_schema_with_all_tables

Revision ID: 3cf0af6dff87
Revises:
Create Date: 2025-10-21 11:51:12.831756

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "3cf0af6dff87"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "job_configurations",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for job configuration",
        ),
        sa.Column(
            "job_type",
            postgresql.ENUM(
                "TRACKED_PLAYER_UPDATER",
                "MATCH_FETCHER",
                "SMURF_ANALYZER",
                "BAN_CHECKER",
                name="job_type_enum",
                schema="app",
            ),
            nullable=False,
            comment="Type of job (tracked_player_updater, player_analyzer)",
        ),
        sa.Column(
            "name",
            sa.String(length=128),
            nullable=False,
            comment="Unique name for this job configuration",
        ),
        sa.Column(
            "schedule",
            sa.String(length=256),
            nullable=False,
            comment="Job schedule (cron expression or interval specification)",
        ),
        sa.Column(
            "is_active",
            sa.Boolean(),
            nullable=False,
            comment="Whether this job is active and should be scheduled",
        ),
        sa.Column(
            "config_json",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Job-specific configuration parameters in JSON format",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this job configuration was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this job configuration was last updated",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_job_configurations")),
        schema="app",
    )
    op.create_index(
        "idx_job_config_type_active",
        "job_configurations",
        ["job_type", "is_active"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_job_configurations_is_active"),
        "job_configurations",
        ["is_active"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_job_configurations_job_type"),
        "job_configurations",
        ["job_type"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_job_configurations_name"),
        "job_configurations",
        ["name"],
        unique=True,
        schema="app",
    )
    op.create_table(
        "matches",
        sa.Column(
            "match_id",
            sa.String(length=64),
            nullable=False,
            comment="Unique match identifier from Riot API",
        ),
        sa.Column(
            "platform_id",
            sa.String(length=8),
            nullable=False,
            comment="Platform where the match was played (e.g., EUW1, EUN1)",
        ),
        sa.Column(
            "game_creation",
            sa.BigInteger(),
            nullable=False,
            comment="Game creation timestamp in milliseconds since epoch",
        ),
        sa.Column(
            "game_duration",
            sa.Integer(),
            nullable=False,
            comment="Game duration in seconds",
        ),
        sa.Column(
            "queue_id",
            sa.Integer(),
            nullable=False,
            comment="Queue type ID (e.g., 420=Ranked Solo, 440=Ranked Flex)",
        ),
        sa.Column(
            "game_version",
            sa.String(length=32),
            nullable=False,
            comment="Game version (e.g., '14.20.555.5555')",
        ),
        sa.Column(
            "map_id",
            sa.Integer(),
            nullable=False,
            comment="Map ID (e.g., 11=Summoner's Rift)",
        ),
        sa.Column(
            "game_mode",
            sa.String(length=32),
            nullable=True,
            comment="Game mode (e.g., 'CLASSIC', 'ARAM')",
        ),
        sa.Column(
            "game_type",
            sa.String(length=32),
            nullable=True,
            comment="Game type (e.g., 'MATCHED_GAME')",
        ),
        sa.Column(
            "game_end_timestamp",
            sa.BigInteger(),
            nullable=True,
            comment="Game end timestamp in milliseconds since epoch",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this match record was created in our database",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this match record was last updated",
        ),
        sa.Column(
            "tournament_id",
            sa.String(length=64),
            nullable=True,
            comment="Tournament ID if this is a tournament match",
        ),
        sa.Column(
            "is_processed",
            sa.Boolean(),
            nullable=False,
            comment="Whether this match has been processed for player analysis",
        ),
        sa.Column(
            "processing_error",
            sa.String(length=256),
            nullable=True,
            comment="Error message if match processing failed",
        ),
        sa.PrimaryKeyConstraint("match_id", name=op.f("pk_matches")),
        schema="app",
    )
    op.create_index(
        "idx_matches_creation_queue",
        "matches",
        ["game_creation", "queue_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_matches_platform_creation",
        "matches",
        ["platform_id", "game_creation"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_matches_processed_creation",
        "matches",
        ["is_processed", "game_creation"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_matches_processed_error",
        "matches",
        ["is_processed", "processing_error"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_matches_queue_creation",
        "matches",
        ["queue_id", "game_creation"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_matches_version_creation",
        "matches",
        ["game_version", "game_creation"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_matches_game_creation"),
        "matches",
        ["game_creation"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_matches_game_mode"),
        "matches",
        ["game_mode"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_matches_game_type"),
        "matches",
        ["game_type"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_matches_game_version"),
        "matches",
        ["game_version"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_matches_is_processed"),
        "matches",
        ["is_processed"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_matches_match_id"),
        "matches",
        ["match_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_matches_platform_id"),
        "matches",
        ["platform_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_matches_queue_id"),
        "matches",
        ["queue_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_matches_tournament_id"),
        "matches",
        ["tournament_id"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "players",
        sa.Column(
            "puuid",
            sa.String(length=78),
            nullable=False,
            comment="Player's universally unique identifier from Riot API",
        ),
        sa.Column(
            "riot_id",
            sa.String(length=128),
            nullable=True,
            comment="Player's Riot ID (game name)",
        ),
        sa.Column(
            "tag_line",
            sa.String(length=32),
            nullable=True,
            comment="Player's tag line (region identifier)",
        ),
        sa.Column(
            "summoner_name",
            sa.String(length=32),
            nullable=True,
            comment="Current summoner name (can change)",
        ),
        sa.Column(
            "platform",
            sa.String(length=8),
            nullable=False,
            comment="Platform where the player was last seen (e.g., EUW1, EUN1)",
        ),
        sa.Column(
            "account_level",
            sa.Integer(),
            nullable=True,
            comment="Player's account level",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this player record was first created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this player record was last updated",
        ),
        sa.Column(
            "last_seen",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this player was last seen in a match",
        ),
        sa.Column(
            "is_active",
            sa.Boolean(),
            nullable=False,
            comment="Whether this player record is active (not deleted)",
        ),
        sa.Column(
            "is_tracked",
            sa.Boolean(),
            nullable=False,
            comment="Whether this player is being actively tracked for continuous updates",
        ),
        sa.Column(
            "is_analyzed",
            sa.Boolean(),
            nullable=False,
            comment="Whether this player has been analyzed for smurf/boosted detection",
        ),
        sa.Column(
            "matches_exhausted",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
            comment="True when all available matches have been fetched from Riot API",
        ),
        sa.Column(
            "last_ban_check",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When this player was last checked for ban status",
        ),
        sa.Column(
            "profile_icon_id", sa.Integer(), nullable=True, comment="Profile icon ID"
        ),
        sa.Column(
            "summoner_id",
            sa.String(length=64),
            nullable=True,
            comment="Encrypted summoner ID (used for some Riot API endpoints)",
        ),
        sa.PrimaryKeyConstraint("puuid", name=op.f("pk_players")),
        schema="app",
    )
    op.create_index(
        "idx_players_last_seen_active",
        "players",
        ["last_seen", "is_active"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_players_riot_tag",
        "players",
        ["riot_id", "tag_line"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_players_summoner_platform",
        "players",
        ["summoner_name", "platform"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_players_is_active"),
        "players",
        ["is_active"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_players_is_analyzed"),
        "players",
        ["is_analyzed"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_players_is_tracked"),
        "players",
        ["is_tracked"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_players_last_ban_check"),
        "players",
        ["last_ban_check"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_players_last_seen"),
        "players",
        ["last_seen"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_players_matches_exhausted"),
        "players",
        ["matches_exhausted"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_players_platform"),
        "players",
        ["platform"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_players_puuid"), "players", ["puuid"], unique=False, schema="app"
    )
    op.create_index(
        op.f("ix_app_players_riot_id"),
        "players",
        ["riot_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_players_summoner_id"),
        "players",
        ["summoner_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_players_summoner_name"),
        "players",
        ["summoner_name"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "system_settings",
        sa.Column(
            "key",
            sa.String(length=128),
            nullable=False,
            comment="Setting key (e.g., 'riot_api_key')",
        ),
        sa.Column("value", sa.Text(), nullable=False, comment="Setting value"),
        sa.Column(
            "category",
            sa.String(length=64),
            nullable=False,
            comment="Setting category (e.g., 'riot_api', 'jobs', 'app')",
        ),
        sa.Column(
            "is_sensitive",
            sa.Boolean(),
            nullable=False,
            comment="Whether this setting contains sensitive data (should be masked)",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this setting was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this setting was last updated",
        ),
        sa.PrimaryKeyConstraint("key", name=op.f("pk_system_settings")),
        schema="app",
    )
    op.create_index(
        op.f("ix_app_system_settings_key"),
        "system_settings",
        ["key"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "job_executions",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for job execution",
        ),
        sa.Column(
            "job_config_id",
            sa.Integer(),
            nullable=False,
            comment="Reference to the job configuration",
        ),
        sa.Column(
            "started_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this job execution started",
        ),
        sa.Column(
            "completed_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When this job execution completed",
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "PENDING",
                "RUNNING",
                "SUCCESS",
                "FAILED",
                "RATE_LIMITED",
                name="job_status_enum",
                schema="app",
            ),
            nullable=False,
            comment="Current status of job execution",
        ),
        sa.Column(
            "api_requests_made",
            sa.Integer(),
            nullable=False,
            comment="Number of API requests made during this execution",
        ),
        sa.Column(
            "records_created",
            sa.Integer(),
            nullable=False,
            comment="Number of database records created during this execution",
        ),
        sa.Column(
            "records_updated",
            sa.Integer(),
            nullable=False,
            comment="Number of database records updated during this execution",
        ),
        sa.Column(
            "error_message",
            sa.Text(),
            nullable=True,
            comment="Error message if job execution failed",
        ),
        sa.Column(
            "execution_log",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Detailed execution log and metrics in JSON format",
        ),
        sa.Column(
            "detailed_logs",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="All logs captured during job execution (INFO, WARNING, ERROR, etc.)",
        ),
        sa.ForeignKeyConstraint(
            ["job_config_id"],
            ["app.job_configurations.id"],
            name=op.f("fk_job_executions_job_config_id_job_configurations"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_job_executions")),
        schema="app",
    )
    op.create_index(
        "idx_job_execution_config_started",
        "job_executions",
        ["job_config_id", sa.literal_column("started_at DESC")],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_job_execution_status_started",
        "job_executions",
        ["status", sa.literal_column("started_at DESC")],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_job_executions_completed_at"),
        "job_executions",
        ["completed_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_job_executions_job_config_id"),
        "job_executions",
        ["job_config_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_job_executions_started_at"),
        "job_executions",
        ["started_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_job_executions_status"),
        "job_executions",
        ["status"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "match_participants",
        sa.Column(
            "id",
            sa.BigInteger(),
            nullable=False,
            comment="Auto-incrementing primary key",
        ),
        sa.Column(
            "match_id",
            sa.String(length=64),
            nullable=False,
            comment="Reference to the match this participant belongs to",
        ),
        sa.Column(
            "puuid",
            sa.String(length=78),
            nullable=False,
            comment="Reference to the player (Riot PUUID)",
        ),
        sa.Column(
            "summoner_name",
            sa.String(length=32),
            nullable=True,
            comment="Summoner name at the time of the match (may be NULL if Riot API returns empty string)",
        ),
        sa.Column(
            "summoner_level",
            sa.Integer(),
            nullable=False,
            comment="Summoner level at the time of the match",
        ),
        sa.Column(
            "team_id",
            sa.Integer(),
            nullable=False,
            comment="Team ID (100 for blue side, 200 for red side)",
        ),
        sa.Column(
            "champion_id",
            sa.Integer(),
            nullable=False,
            comment="Champion ID played by the participant",
        ),
        sa.Column(
            "champion_name",
            sa.String(length=32),
            nullable=False,
            comment="Champion name played by the participant",
        ),
        sa.Column("kills", sa.Integer(), nullable=False, comment="Number of kills"),
        sa.Column("deaths", sa.Integer(), nullable=False, comment="Number of deaths"),
        sa.Column("assists", sa.Integer(), nullable=False, comment="Number of assists"),
        sa.Column(
            "win",
            sa.Boolean(),
            nullable=False,
            comment="Whether the participant won the match",
        ),
        sa.Column(
            "gold_earned", sa.Integer(), nullable=False, comment="Total gold earned"
        ),
        sa.Column("vision_score", sa.Integer(), nullable=False, comment="Vision score"),
        sa.Column(
            "cs",
            sa.Integer(),
            nullable=False,
            comment="Total creep score (minions killed)",
        ),
        sa.Column(
            "kda",
            sa.Numeric(precision=5, scale=2),
            nullable=True,
            comment="Kill-death-assist ratio",
        ),
        sa.Column(
            "champ_level",
            sa.Integer(),
            nullable=False,
            comment="Champion level achieved",
        ),
        sa.Column(
            "total_damage_dealt",
            sa.BigInteger(),
            nullable=False,
            comment="Total damage dealt",
        ),
        sa.Column(
            "total_damage_dealt_to_champions",
            sa.BigInteger(),
            nullable=False,
            comment="Total damage dealt to champions",
        ),
        sa.Column(
            "total_damage_taken",
            sa.BigInteger(),
            nullable=False,
            comment="Total damage taken",
        ),
        sa.Column(
            "total_heal", sa.BigInteger(), nullable=False, comment="Total healing done"
        ),
        sa.Column(
            "individual_position",
            sa.String(length=16),
            nullable=True,
            comment="Individual position (e.g., 'TOP', 'JUNGLE', 'MIDDLE', 'BOTTOM', 'UTILITY')",
        ),
        sa.Column(
            "team_position",
            sa.String(length=16),
            nullable=True,
            comment="Team position",
        ),
        sa.Column(
            "role",
            sa.String(length=16),
            nullable=True,
            comment="Role (e.g., 'DUO', 'DUO_CARRY', 'DUO_SUPPORT', 'SUPPORT')",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this participant record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this participant record was last updated",
        ),
        sa.Column(
            "riot_id_name",
            sa.String(length=128),
            nullable=True,
            comment="Riot ID game name at the time of the match",
        ),
        sa.Column(
            "riot_id_tagline",
            sa.String(length=32),
            nullable=True,
            comment="Riot ID tagline at the time of the match",
        ),
        sa.ForeignKeyConstraint(
            ["match_id"],
            ["app.matches.match_id"],
            name=op.f("fk_match_participants_match_id_matches"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["puuid"],
            ["app.players.puuid"],
            name=op.f("fk_match_participants_puuid_players"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_match_participants")),
        schema="app",
    )
    op.create_index(
        "idx_participants_champion_win",
        "match_participants",
        ["champion_id", "win"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_participants_kills_deaths",
        "match_participants",
        ["kills", "deaths"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_participants_match_puuid",
        "match_participants",
        ["match_id", "puuid"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_participants_position_champion",
        "match_participants",
        ["individual_position", "champion_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_participants_team_win",
        "match_participants",
        ["team_id", "win"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_match_participants_champion_id"),
        "match_participants",
        ["champion_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_match_participants_champion_name"),
        "match_participants",
        ["champion_name"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_match_participants_individual_position"),
        "match_participants",
        ["individual_position"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_match_participants_match_id"),
        "match_participants",
        ["match_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_match_participants_puuid"),
        "match_participants",
        ["puuid"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_match_participants_role"),
        "match_participants",
        ["role"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_match_participants_team_id"),
        "match_participants",
        ["team_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_match_participants_team_position"),
        "match_participants",
        ["team_position"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "matchmaking_analyses",
        sa.Column(
            "id",
            sa.BigInteger(),
            nullable=False,
            comment="Auto-incrementing primary key",
        ),
        sa.Column(
            "puuid",
            sa.String(length=78),
            nullable=False,
            comment="Player PUUID this analysis is for",
        ),
        sa.Column(
            "status",
            sa.String(length=20),
            nullable=False,
            comment="Current status of the analysis",
        ),
        sa.Column(
            "progress",
            sa.BigInteger(),
            nullable=False,
            comment="Number of API requests completed",
        ),
        sa.Column(
            "total_requests",
            sa.BigInteger(),
            nullable=False,
            comment="Estimated total API requests needed",
        ),
        sa.Column(
            "estimated_minutes_remaining",
            sa.BigInteger(),
            nullable=False,
            comment="Estimated minutes remaining for completion",
        ),
        sa.Column(
            "results",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Analysis results as JSON (team/enemy winrates)",
        ),
        sa.Column(
            "error_message",
            sa.Text(),
            nullable=True,
            comment="Error message if analysis failed",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this analysis was created",
        ),
        sa.Column(
            "started_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When this analysis was started",
        ),
        sa.Column(
            "completed_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When this analysis was completed",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this analysis record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["puuid"],
            ["app.players.puuid"],
            name=op.f("fk_matchmaking_analyses_puuid_players"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_matchmaking_analyses")),
        schema="app",
    )
    op.create_index(
        op.f("ix_app_matchmaking_analyses_puuid"),
        "matchmaking_analyses",
        ["puuid"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_matchmaking_analyses_status"),
        "matchmaking_analyses",
        ["status"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "ix_matchmaking_analyses_created_at",
        "matchmaking_analyses",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "ix_matchmaking_analyses_puuid_status",
        "matchmaking_analyses",
        ["puuid", "status"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "player_ranks",
        sa.Column(
            "id", sa.Integer(), nullable=False, comment="Auto-incrementing primary key"
        ),
        sa.Column(
            "puuid",
            sa.String(length=78),
            nullable=False,
            comment="Reference to the player (Riot PUUID)",
        ),
        sa.Column(
            "queue_type",
            sa.String(length=32),
            nullable=False,
            comment="Queue type (e.g., RANKED_SOLO_5x5, RANKED_FLEX_SR)",
        ),
        sa.Column(
            "tier",
            sa.String(length=16),
            nullable=False,
            comment="Rank tier (e.g., GOLD, PLATINUM, DIAMOND)",
        ),
        sa.Column(
            "rank",
            sa.String(length=4),
            nullable=True,
            comment="Rank division (I, II, III, IV)",
        ),
        sa.Column(
            "league_points",
            sa.Integer(),
            nullable=False,
            comment="League points (0-100)",
        ),
        sa.Column(
            "wins", sa.Integer(), nullable=False, comment="Number of wins in this queue"
        ),
        sa.Column(
            "losses",
            sa.Integer(),
            nullable=False,
            comment="Number of losses in this queue",
        ),
        sa.Column(
            "veteran",
            sa.Boolean(),
            nullable=False,
            comment="Whether the player is a veteran",
        ),
        sa.Column(
            "inactive",
            sa.Boolean(),
            nullable=False,
            comment="Whether the player is inactive",
        ),
        sa.Column(
            "fresh_blood",
            sa.Boolean(),
            nullable=False,
            comment="Whether the player is fresh blood",
        ),
        sa.Column(
            "hot_streak",
            sa.Boolean(),
            nullable=False,
            comment="Whether the player is on a hot streak",
        ),
        sa.Column(
            "league_id", sa.String(length=64), nullable=True, comment="League ID"
        ),
        sa.Column(
            "league_name", sa.String(length=64), nullable=True, comment="League name"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this rank record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this rank record was last updated",
        ),
        sa.Column(
            "season_id",
            sa.String(length=16),
            nullable=True,
            comment="Season identifier",
        ),
        sa.Column(
            "is_current",
            sa.Boolean(),
            nullable=False,
            comment="Whether this is the current rank for the player",
        ),
        sa.ForeignKeyConstraint(
            ["puuid"],
            ["app.players.puuid"],
            name=op.f("fk_player_ranks_puuid_players"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_player_ranks")),
        schema="app",
    )
    op.create_index(
        "idx_ranks_puuid_current",
        "player_ranks",
        ["puuid", "is_current"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_ranks_puuid_queue",
        "player_ranks",
        ["puuid", "queue_type"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_ranks_queue_current",
        "player_ranks",
        ["queue_type", "is_current"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_ranks_tier_lp",
        "player_ranks",
        ["tier", "league_points"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_ranks_tier_rank",
        "player_ranks",
        ["tier", "rank"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_player_ranks_is_current"),
        "player_ranks",
        ["is_current"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_player_ranks_league_id"),
        "player_ranks",
        ["league_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_player_ranks_puuid"),
        "player_ranks",
        ["puuid"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_player_ranks_queue_type"),
        "player_ranks",
        ["queue_type"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_player_ranks_rank"),
        "player_ranks",
        ["rank"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_player_ranks_season_id"),
        "player_ranks",
        ["season_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_player_ranks_tier"),
        "player_ranks",
        ["tier"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "smurf_detections",
        sa.Column(
            "id", sa.Integer(), nullable=False, comment="Auto-incrementing primary key"
        ),
        sa.Column(
            "puuid",
            sa.String(length=78),
            nullable=False,
            comment="Reference to the player being analyzed (Riot PUUID)",
        ),
        sa.Column(
            "is_smurf",
            sa.Boolean(),
            nullable=False,
            comment="Whether the player is detected as a smurf",
        ),
        sa.Column(
            "confidence",
            sa.String(length=32),
            nullable=True,
            comment="Confidence level in the player analysis",
        ),
        sa.Column(
            "smurf_score",
            sa.Numeric(precision=5, scale=3),
            nullable=False,
            comment="Overall smurf score (0.0-1.0)",
        ),
        sa.Column(
            "win_rate_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Win rate based smurf score component",
        ),
        sa.Column(
            "kda_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="KDA based smurf score component",
        ),
        sa.Column(
            "account_level_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Account level based smurf score component",
        ),
        sa.Column(
            "rank_discrepancy_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Rank discrepancy based smurf score component",
        ),
        sa.Column(
            "rank_progression_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Rank progression based smurf score component",
        ),
        sa.Column(
            "win_rate_trend_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Win rate trend based smurf score component",
        ),
        sa.Column(
            "performance_consistency_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Performance consistency based smurf score component",
        ),
        sa.Column(
            "performance_trends_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Performance trends based smurf score component",
        ),
        sa.Column(
            "role_performance_score",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Role performance based smurf score component",
        ),
        sa.Column(
            "games_analyzed",
            sa.Integer(),
            nullable=False,
            comment="Number of games analyzed for this detection",
        ),
        sa.Column(
            "queue_type",
            sa.String(length=32),
            nullable=True,
            comment="Queue type analyzed (e.g., RANKED_SOLO_5x5)",
        ),
        sa.Column(
            "time_period_days",
            sa.Integer(),
            nullable=True,
            comment="Time period in days analyzed",
        ),
        sa.Column(
            "win_rate_threshold",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="Win rate threshold used for detection",
        ),
        sa.Column(
            "kda_threshold",
            sa.Numeric(precision=5, scale=3),
            nullable=True,
            comment="KDA threshold used for detection",
        ),
        sa.Column(
            "account_level",
            sa.Integer(),
            nullable=True,
            comment="Account level at time of analysis",
        ),
        sa.Column(
            "current_tier",
            sa.String(length=16),
            nullable=True,
            comment="Current tier at time of analysis",
        ),
        sa.Column(
            "current_rank",
            sa.String(length=4),
            nullable=True,
            comment="Current rank at time of analysis",
        ),
        sa.Column(
            "peak_tier",
            sa.String(length=16),
            nullable=True,
            comment="Peak tier observed",
        ),
        sa.Column(
            "peak_rank",
            sa.String(length=4),
            nullable=True,
            comment="Peak rank observed",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this player analysis was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When this player analysis was last updated",
        ),
        sa.Column(
            "last_analysis",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="When the last analysis was performed",
        ),
        sa.Column(
            "analysis_version",
            sa.String(length=16),
            nullable=True,
            comment="Version of the player analysis algorithm",
        ),
        sa.Column(
            "false_positive_reported",
            sa.Boolean(),
            nullable=False,
            comment="Whether this detection was reported as false positive",
        ),
        sa.Column(
            "manually_verified",
            sa.Boolean(),
            nullable=False,
            comment="Whether this detection was manually verified",
        ),
        sa.Column(
            "notes",
            sa.Text(),
            nullable=True,
            comment="Additional notes about this detection",
        ),
        sa.ForeignKeyConstraint(
            ["puuid"],
            ["app.players.puuid"],
            name=op.f("fk_smurf_detections_puuid_players"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_smurf_detections")),
        schema="app",
    )
    op.create_index(
        "idx_smurf_detection_analysis_time",
        "smurf_detections",
        ["last_analysis", "is_smurf"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_smurf_detection_false_positive",
        "smurf_detections",
        ["false_positive_reported", "is_smurf"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_smurf_detection_is_smurf_score",
        "smurf_detections",
        ["is_smurf", "smurf_score"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_smurf_detection_puuid_confidence",
        "smurf_detections",
        ["puuid", "confidence"],
        unique=False,
        schema="app",
    )
    op.create_index(
        "idx_smurf_detection_queue_score",
        "smurf_detections",
        ["queue_type", "smurf_score"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_smurf_detections_confidence"),
        "smurf_detections",
        ["confidence"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_smurf_detections_false_positive_reported"),
        "smurf_detections",
        ["false_positive_reported"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_smurf_detections_is_smurf"),
        "smurf_detections",
        ["is_smurf"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_smurf_detections_last_analysis"),
        "smurf_detections",
        ["last_analysis"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_smurf_detections_manually_verified"),
        "smurf_detections",
        ["manually_verified"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_smurf_detections_puuid"),
        "smurf_detections",
        ["puuid"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_smurf_detections_queue_type"),
        "smurf_detections",
        ["queue_type"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("ix_app_smurf_detections_smurf_score"),
        "smurf_detections",
        ["smurf_score"],
        unique=False,
        schema="app",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_app_smurf_detections_smurf_score"),
        table_name="smurf_detections",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_smurf_detections_queue_type"),
        table_name="smurf_detections",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_smurf_detections_puuid"),
        table_name="smurf_detections",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_smurf_detections_manually_verified"),
        table_name="smurf_detections",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_smurf_detections_last_analysis"),
        table_name="smurf_detections",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_smurf_detections_is_smurf"),
        table_name="smurf_detections",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_smurf_detections_false_positive_reported"),
        table_name="smurf_detections",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_smurf_detections_confidence"),
        table_name="smurf_detections",
        schema="app",
    )
    op.drop_index(
        "idx_smurf_detection_queue_score", table_name="smurf_detections", schema="app"
    )
    op.drop_index(
        "idx_smurf_detection_puuid_confidence",
        table_name="smurf_detections",
        schema="app",
    )
    op.drop_index(
        "idx_smurf_detection_is_smurf_score",
        table_name="smurf_detections",
        schema="app",
    )
    op.drop_index(
        "idx_smurf_detection_false_positive",
        table_name="smurf_detections",
        schema="app",
    )
    op.drop_index(
        "idx_smurf_detection_analysis_time", table_name="smurf_detections", schema="app"
    )
    op.drop_table("smurf_detections", schema="app")
    op.drop_index(
        op.f("ix_app_player_ranks_tier"), table_name="player_ranks", schema="app"
    )
    op.drop_index(
        op.f("ix_app_player_ranks_season_id"), table_name="player_ranks", schema="app"
    )
    op.drop_index(
        op.f("ix_app_player_ranks_rank"), table_name="player_ranks", schema="app"
    )
    op.drop_index(
        op.f("ix_app_player_ranks_queue_type"), table_name="player_ranks", schema="app"
    )
    op.drop_index(
        op.f("ix_app_player_ranks_puuid"), table_name="player_ranks", schema="app"
    )
    op.drop_index(
        op.f("ix_app_player_ranks_league_id"), table_name="player_ranks", schema="app"
    )
    op.drop_index(
        op.f("ix_app_player_ranks_is_current"), table_name="player_ranks", schema="app"
    )
    op.drop_index("idx_ranks_tier_rank", table_name="player_ranks", schema="app")
    op.drop_index("idx_ranks_tier_lp", table_name="player_ranks", schema="app")
    op.drop_index("idx_ranks_queue_current", table_name="player_ranks", schema="app")
    op.drop_index("idx_ranks_puuid_queue", table_name="player_ranks", schema="app")
    op.drop_index("idx_ranks_puuid_current", table_name="player_ranks", schema="app")
    op.drop_table("player_ranks", schema="app")
    op.drop_index(
        "ix_matchmaking_analyses_puuid_status",
        table_name="matchmaking_analyses",
        schema="app",
    )
    op.drop_index(
        "ix_matchmaking_analyses_created_at",
        table_name="matchmaking_analyses",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_matchmaking_analyses_status"),
        table_name="matchmaking_analyses",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_matchmaking_analyses_puuid"),
        table_name="matchmaking_analyses",
        schema="app",
    )
    op.drop_table("matchmaking_analyses", schema="app")
    op.drop_index(
        op.f("ix_app_match_participants_team_position"),
        table_name="match_participants",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_match_participants_team_id"),
        table_name="match_participants",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_match_participants_role"),
        table_name="match_participants",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_match_participants_puuid"),
        table_name="match_participants",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_match_participants_match_id"),
        table_name="match_participants",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_match_participants_individual_position"),
        table_name="match_participants",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_match_participants_champion_name"),
        table_name="match_participants",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_match_participants_champion_id"),
        table_name="match_participants",
        schema="app",
    )
    op.drop_index(
        "idx_participants_team_win", table_name="match_participants", schema="app"
    )
    op.drop_index(
        "idx_participants_position_champion",
        table_name="match_participants",
        schema="app",
    )
    op.drop_index(
        "idx_participants_match_puuid", table_name="match_participants", schema="app"
    )
    op.drop_index(
        "idx_participants_kills_deaths", table_name="match_participants", schema="app"
    )
    op.drop_index(
        "idx_participants_champion_win", table_name="match_participants", schema="app"
    )
    op.drop_table("match_participants", schema="app")
    op.drop_index(
        op.f("ix_app_job_executions_status"), table_name="job_executions", schema="app"
    )
    op.drop_index(
        op.f("ix_app_job_executions_started_at"),
        table_name="job_executions",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_job_executions_job_config_id"),
        table_name="job_executions",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_job_executions_completed_at"),
        table_name="job_executions",
        schema="app",
    )
    op.drop_index(
        "idx_job_execution_status_started", table_name="job_executions", schema="app"
    )
    op.drop_index(
        "idx_job_execution_config_started", table_name="job_executions", schema="app"
    )
    op.drop_table("job_executions", schema="app")
    op.drop_index(
        op.f("ix_app_system_settings_key"), table_name="system_settings", schema="app"
    )
    op.drop_table("system_settings", schema="app")
    op.drop_index(
        op.f("ix_app_players_summoner_name"), table_name="players", schema="app"
    )
    op.drop_index(
        op.f("ix_app_players_summoner_id"), table_name="players", schema="app"
    )
    op.drop_index(op.f("ix_app_players_riot_id"), table_name="players", schema="app")
    op.drop_index(op.f("ix_app_players_puuid"), table_name="players", schema="app")
    op.drop_index(op.f("ix_app_players_platform"), table_name="players", schema="app")
    op.drop_index(
        op.f("ix_app_players_matches_exhausted"), table_name="players", schema="app"
    )
    op.drop_index(op.f("ix_app_players_last_seen"), table_name="players", schema="app")
    op.drop_index(
        op.f("ix_app_players_last_ban_check"), table_name="players", schema="app"
    )
    op.drop_index(op.f("ix_app_players_is_tracked"), table_name="players", schema="app")
    op.drop_index(
        op.f("ix_app_players_is_analyzed"), table_name="players", schema="app"
    )
    op.drop_index(op.f("ix_app_players_is_active"), table_name="players", schema="app")
    op.drop_index("idx_players_summoner_platform", table_name="players", schema="app")
    op.drop_index("idx_players_riot_tag", table_name="players", schema="app")
    op.drop_index("idx_players_last_seen_active", table_name="players", schema="app")
    op.drop_table("players", schema="app")
    op.drop_index(
        op.f("ix_app_matches_tournament_id"), table_name="matches", schema="app"
    )
    op.drop_index(op.f("ix_app_matches_queue_id"), table_name="matches", schema="app")
    op.drop_index(
        op.f("ix_app_matches_platform_id"), table_name="matches", schema="app"
    )
    op.drop_index(op.f("ix_app_matches_match_id"), table_name="matches", schema="app")
    op.drop_index(
        op.f("ix_app_matches_is_processed"), table_name="matches", schema="app"
    )
    op.drop_index(
        op.f("ix_app_matches_game_version"), table_name="matches", schema="app"
    )
    op.drop_index(op.f("ix_app_matches_game_type"), table_name="matches", schema="app")
    op.drop_index(op.f("ix_app_matches_game_mode"), table_name="matches", schema="app")
    op.drop_index(
        op.f("ix_app_matches_game_creation"), table_name="matches", schema="app"
    )
    op.drop_index("idx_matches_version_creation", table_name="matches", schema="app")
    op.drop_index("idx_matches_queue_creation", table_name="matches", schema="app")
    op.drop_index("idx_matches_processed_error", table_name="matches", schema="app")
    op.drop_index("idx_matches_processed_creation", table_name="matches", schema="app")
    op.drop_index("idx_matches_platform_creation", table_name="matches", schema="app")
    op.drop_index("idx_matches_creation_queue", table_name="matches", schema="app")
    op.drop_table("matches", schema="app")
    op.drop_index(
        op.f("ix_app_job_configurations_name"),
        table_name="job_configurations",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_job_configurations_job_type"),
        table_name="job_configurations",
        schema="app",
    )
    op.drop_index(
        op.f("ix_app_job_configurations_is_active"),
        table_name="job_configurations",
        schema="app",
    )
    op.drop_index(
        "idx_job_config_type_active", table_name="job_configurations", schema="app"
    )
    op.drop_table("job_configurations", schema="app")
    # ### end Alembic commands ###
