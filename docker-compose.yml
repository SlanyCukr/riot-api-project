services:
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
      target: runner
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
      target: production
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - RIOT_API_KEY=${RIOT_API_KEY}
      - DEBUG=${DEBUG}
      - LOG_LEVEL=${LOG_LEVEL}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JOB_SCHEDULER_ENABLED=${JOB_SCHEDULER_ENABLED}
      - JOB_INTERVAL_SECONDS=${JOB_INTERVAL_SECONDS}
      - JOB_TIMEOUT_SECONDS=${JOB_TIMEOUT_SECONDS}
      - MAX_TRACKED_PLAYERS=${MAX_TRACKED_PLAYERS}
    ports:
      - "${BACKEND_PORT}:8000"
    volumes:
      - backend-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:18
    restart: unless-stopped
    networks:
      - app-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s


networks:
  app-network:
    driver: bridge
    name: ${COMPOSE_PROJECT_NAME}_network

volumes:
  postgres-data:
    name: ${COMPOSE_PROJECT_NAME}_postgres_data
  backend-logs:
    name: ${COMPOSE_PROJECT_NAME}_backend_logs
