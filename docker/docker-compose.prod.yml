# Production overrides for Docker Compose
# Use with: docker compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  frontend:
    build:
      target: runner
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    restart: always
    ports:
      - "${FRONTEND_PORT}:3000"
    # Security: read-only root filesystem where possible
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache

  backend:
    build:
      target: production
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      RIOT_API_KEY: ${RIOT_API_KEY}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      JOB_SCHEDULER_ENABLED: ${JOB_SCHEDULER_ENABLED}
      ENVIRONMENT: production
    restart: always
    ports:
      - "${BACKEND_PORT}:8000"

  postgres:
    image: postgres:18-alpine
    command: postgres -c shared_preload_libraries=pg_stat_statements
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Production PostgreSQL tuning
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Security: run as non-root
    user: postgres
    # Security: read-only root filesystem
    read_only: true
    tmpfs:
      - /tmp
      - /run/postgresql
