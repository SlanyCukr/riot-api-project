services:
  frontend:
    build:
      target: development
    container_name: ${COMPOSE_PROJECT_NAME}_frontend_dev
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "${FRONTEND_PORT}:3000"
    command: ["npm", "run", "dev"]
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    develop:
      watch:
        # Automatically rebuild frontend when .env changes
        - path: .env
          action: rebuild
        # Hot reload for frontend code changes
        - path: ./frontend
          action: sync+restart
          target: /app
          ignore:
            - node_modules/
            - .next/

  backend:
    build:
      target: development
    container_name: ${COMPOSE_PROJECT_NAME}_backend_dev
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - RIOT_API_KEY=${RIOT_API_KEY}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JOB_SCHEDULER_ENABLED=${JOB_SCHEDULER_ENABLED:-false}
      - JOB_INTERVAL_SECONDS=${JOB_INTERVAL_SECONDS:-120}
      - JOB_TIMEOUT_SECONDS=${JOB_TIMEOUT_SECONDS:-90}
      - MAX_TRACKED_PLAYERS=${MAX_TRACKED_PLAYERS:-10}
    volumes:
      - ./backend:/app
      - /app/.venv
    ports:
      - "${BACKEND_PORT}:8000"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    develop:
      watch:
        # Automatically rebuild backend when .env changes
        - path: .env
          action: rebuild
        # Hot reload for backend code changes (FastAPI auto-reload already handles this)
        - path: ./backend
          action: sync
          target: /app
          ignore:
            - .venv/
            - __pycache__/
            - "*.pyc"

  postgres:
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
