# Development overrides for Docker Compose
# Automatically loaded when using docker compose in development

services:
  frontend:
    build:
      target: development
    container_name: ${COMPOSE_PROJECT_NAME}_frontend_dev
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    ports:
      - "${FRONTEND_PORT}:3000"
    command: ["npm", "run", "dev"]
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    # Docker Compose Watch for automatic syncing
    develop:
      watch:
        # Hot reload for code changes
        - path: ../frontend
          action: sync+restart
          target: /app
          ignore:
            - node_modules/
            - .next/

  backend:
    build:
      target: development
    container_name: ${COMPOSE_PROJECT_NAME}_backend_dev
    environment:
      LOG_LEVEL: DEBUG
      DATABASE_URL: ${DATABASE_URL}
      RIOT_API_KEY: ${RIOT_API_KEY}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      JOB_SCHEDULER_ENABLED: ${JOB_SCHEDULER_ENABLED}
      ENVIRONMENT: dev
    ports:
      - "${BACKEND_PORT}:8000"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    # Docker Compose Watch for automatic syncing
    develop:
      watch:
        # Sync code changes (FastAPI auto-reload handles restart)
        - path: ../backend
          action: sync
          target: /app
          ignore:
            - .venv/
            - __pycache__/
            - "*.pyc"

  postgres:
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
