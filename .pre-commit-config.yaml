# Pre-commit hooks configuration for Riot API Project
# See https://pre-commit.com for more information

repos:
  # Built-in hooks for basic file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-added-large-files
      - id: check-merge-conflict
      - id: debug-statements

  # Ruff - Fast Python linter and formatter (replaces black, isort, flake8)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.14.1
    hooks:
      # Run the linter
      - id: ruff
        args: ["--fix"]
      # Run the formatter
      - id: ruff-format

  # Bandit - Security vulnerability scanner
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        args: ["-c", "backend/pyproject.toml"]
        exclude: ^(tests/|tools/)

  # Vulture - Find dead/unused Python code (non-blocking)
  - repo: local
    hooks:
      - id: vulture
        name: Vulture - Dead Code Detection (non-blocking)
        entry: bash -c 'export LC_ALL=C.UTF-8 && uvx vulture --config backend/pyproject.toml backend/app/ || true'
        language: system
        files: ^backend/.*\.py$
        pass_filenames: false

  # Radon - Code complexity and maintainability checks
  - repo: local
    hooks:
      # Cyclomatic Complexity Check (blocks complexity >= 8)
      # Allows: A-grade (1-5) and simple B-grade (6-7)
      - id: radon-cc
        name: Radon Cyclomatic Complexity (max 7)
        entry: bash -c 'export LC_ALL=C.UTF-8 && cd backend && OUT=$(uvx radon cc app/ --min B --show-complexity --no-assert 2>&1); if echo "$OUT" | grep -qE " - (B \([89]|B \(10\)|[C-F] \()"; then echo "$OUT"; echo "ERROR - Complexity >= 8 found"; exit 1; fi; echo "OK - All complexity <= 7"'
        language: system
        files: ^backend/.*\.py$
        exclude: ^(backend/tests/|backend/alembic/|backend/scripts/)
        pass_filenames: false
        verbose: true

      # Maintainability Index Check (Stricter: A grade = MI >= 20)
      - id: radon-mi
        name: Radon Maintainability Index
        entry: bash -c 'export LC_ALL=C.UTF-8 && cd backend && uvx radon mi app/ --min A --show || (echo "Code maintainability too low! Improve code quality" && exit 1)'
        language: system
        files: ^backend/.*\.py$
        exclude: ^(backend/tests/|backend/alembic/|backend/scripts/)
        pass_filenames: false
        verbose: true

      # Radon Complexity Report (non-blocking, informational)
      - id: radon-report
        name: Radon Complexity Report (Info)
        entry: bash -c 'export LC_ALL=C.UTF-8 && echo "üìä Complexity Report:" && cd backend && uvx radon cc app/ -a -s -n C || true'
        language: system
        files: ^backend/.*\.py$
        exclude: ^(backend/tests/|backend/alembic/|backend/scripts/)
        pass_filenames: false
        stages: [manual] # Only runs when explicitly called with --hook-stage manual

      # pydocstyle - Documentation quality checker (ReST style with relaxed rules)
      - id: pydocstyle
        name: pydocstyle - Docstring Quality
        entry: bash -c 'export LC_ALL=C.UTF-8 && cd backend && uvx pydocstyle --config=pyproject.toml app/'
        language: system
        files: ^backend/.*\.py$
        exclude: ^(backend/tests/|backend/alembic/|backend/scripts/)
        pass_filenames: false
        verbose: true

  # Frontend linting with Next.js (local hook for better compatibility)
  - repo: local
    hooks:
      - id: frontend-lint
        name: Frontend ESLint
        entry: >
          bash -c 'export LC_ALL=C.UTF-8 && cd frontend &&
          if [ ! -d node_modules ]; then
          echo "‚ùå ERROR: Frontend dependencies not installed! Run: cd frontend && npm install";
          exit 1;
          fi &&
          npm run lint -- --max-warnings 0 ||
          (echo "‚ùå Frontend linting failed! Fix errors before committing." && exit 1)'
        language: system
        files: ^frontend/.*\.(ts|tsx|js|jsx)$
        exclude: ^frontend/node_modules/
        pass_filenames: false

  # Frontend TypeScript type checking
  - repo: local
    hooks:
      - id: frontend-typecheck
        name: TypeScript Type Check
        entry: >
          bash -c 'export LC_ALL=C.UTF-8 && cd frontend &&
          if [ ! -d node_modules ]; then
          echo "‚ùå ERROR: Frontend dependencies not installed! Run: cd frontend && npm install";
          exit 1;
          fi &&
          npx tsc --noEmit ||
          (echo "‚ùå TypeScript type checking failed! Fix type errors before committing." && exit 1)'
        language: system
        files: ^frontend/.*\.(ts|tsx)$
        exclude: ^frontend/node_modules/
        pass_filenames: false

  # Frontend Complexity Check
  - repo: local
    hooks:
      - id: frontend-complexity
        name: Frontend Complexity Check
        entry: bash -c 'export LC_ALL=C.UTF-8 && cd frontend && npx eslint app/ components/ lib/ --rule "complexity:[error,10]" --rule "max-lines-per-function:[warn,50]" || (echo "‚ùå Frontend code too complex! Consider refactoring." && exit 1)'
        language: system
        files: ^frontend/(app|components|lib)/.*\.(ts|tsx|js|jsx)$
        exclude: ^frontend/node_modules/
        pass_filenames: false
        stages: [manual] # Optional - only runs when explicitly called

# Configuration for pre-commit
default_stages: [pre-commit]
fail_fast: false

# Exclude certain paths from all hooks
exclude: |
  (?x)^(
    \.git/.*|
    \.tox/.*|
    build/.*|
    dist/.*|
    .*\.min\.(js|css)$|
    __pycache__/.*|
    frontend/node_modules/.*
  )$
