name: Deploy to RPI5 16GB

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_setup:
        description: 'Run production setup script (‚ö†Ô∏è DESTRUCTIVE - deletes all data!)'
        required: false
        type: boolean
        default: false

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to Production (RPI5 16GB)
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup deployment directory
        run: |
          echo "üîÑ Setting up deployment directory..."
          rm -rf /home/pi/riot-api
          mkdir -p /home/pi
          cp -r /home/pi/actions-runner/_work/riot-api-project/riot-api-project /home/pi/riot-api
          echo "‚úÖ Repository copied to /home/pi/riot-api"

      - name: Generate .env file from secrets
        run: |
          cd /home/pi/riot-api
          echo "üîê Generating .env file from GitHub secrets..."
          cat > .env << 'EOF'
          # Riot API Configuration
          RIOT_API_KEY=${{ secrets.RIOT_API_KEY }}
          RIOT_REGION=europe
          RIOT_PLATFORM=eun1

          # Database Configuration
          POSTGRES_DB=riot_api_db
          POSTGRES_USER=riot_api_user
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          DATABASE_URL=postgresql://riot_api_user:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/riot_api_db

          # Database Pool Configuration
          DB_POOL_SIZE=10
          DB_MAX_OVERFLOW=20
          DB_POOL_TIMEOUT=30
          DB_POOL_RECYCLE=1800

          # Job Scheduler Configuration
          JOB_SCHEDULER_ENABLED=true
          JOB_INTERVAL_SECONDS=120
          JOB_TIMEOUT_SECONDS=90
          MAX_TRACKED_PLAYERS=10

          # Application Configuration
          DEBUG=false
          LOG_LEVEL=INFO

          # Frontend Configuration
          NEXT_PUBLIC_API_URL=https://leagueyespy.com
          NODE_ENV=production

          # CORS Configuration
          CORS_ORIGINS=https://leagueyespy.com,https://www.leagueyespy.com

          # Docker Configuration
          COMPOSE_PROJECT_NAME=riot_api_app
          BACKEND_PORT=8086
          FRONTEND_PORT=8088
          POSTGRES_PORT=5433
          EOF
          echo "‚úÖ .env file generated successfully"

      - name: Build Docker images
        run: |
          cd /home/pi/riot-api
          echo "üì¶ Building Docker images without cache..."

          # Build frontend
          echo "üé® Building frontend..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml build --no-cache --pull frontend

          # Build backend
          echo "üöÄ Building backend..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml build --no-cache --pull backend

          echo "‚úÖ All images built successfully"

      - name: Stop existing containers
        run: |
          cd /home/pi/riot-api
          echo "üõë Stopping existing containers..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml down --remove-orphans || true
          echo "‚úÖ Containers stopped"

      - name: Deploy new containers
        run: |
          cd /home/pi/riot-api
          echo "üöÄ Deploying new containers..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
          echo "‚úÖ Containers deployed"

      - name: Wait for services to start
        run: |
          echo "‚è≥ Waiting for services to start..."
          sleep 30

      - name: Verify deployment
        run: |
          cd /home/pi/riot-api
          echo "üìä Container status:"
          docker compose -f docker-compose.yml -f docker-compose.prod.yml ps

          echo "üîç Running health checks..."

          # Test PostgreSQL connectivity
          echo "üóÑÔ∏è  Testing PostgreSQL connectivity..."
          if docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T postgres pg_isready -U riot_api_user -d riot_api_db; then
            echo "‚úÖ PostgreSQL is ready"
          else
            echo "‚ùå PostgreSQL not ready"
            exit 1
          fi

          # Test backend API health endpoint
          echo "üîç Testing Backend API health endpoint..."
          for i in {1..10}; do
            if curl -f -s http://localhost:8086/health > /dev/null; then
              echo "‚úÖ Backend API health check passed"
              break
            else
              echo "‚è≥ Attempt $i/10: Backend API not ready yet, waiting..."
              sleep 5
            fi
            if [ $i -eq 10 ]; then
              echo "‚ùå Backend API health check failed after 10 attempts"
              echo "Debug: Container logs"
              docker compose -f docker-compose.yml -f docker-compose.prod.yml logs --tail=50 backend
              exit 1
            fi
          done

          # Test frontend accessibility
          echo "üîç Testing Frontend accessibility..."
          for i in {1..10}; do
            if curl -f -s http://localhost:8088 > /dev/null; then
              echo "‚úÖ Frontend accessible"
              break
            else
              echo "‚è≥ Attempt $i/10: Frontend not ready yet, waiting..."
              sleep 5
            fi
            if [ $i -eq 10 ]; then
              echo "‚ùå Frontend not accessible after 10 attempts"
              echo "Debug: Container logs"
              docker compose -f docker-compose.yml -f docker-compose.prod.yml logs --tail=50 frontend
              exit 1
            fi
          done

          echo "üéâ All health checks passed!"

      - name: Show deployment info
        run: |
          echo "üåê Riot API Project is now deployed:"
          echo "   Production URL: https://leagueyespy.com"
          echo "   Backend API:    http://localhost:8086"
          echo "   Frontend:       http://localhost:8088"
          echo "   Status:         All services running on RPI5 16GB"

      - name: Run production setup script
        if: ${{ github.event.inputs.run_setup == 'true' }}
        run: |
          cd /home/pi/riot-api
          echo "‚ö†Ô∏è  Running production setup script..."
          echo "‚ö†Ô∏è  This will DELETE ALL DATA in the database!"
          chmod +x scripts/setup-production.sh
          # Run setup script with automatic 'yes' confirmation
          yes | ./scripts/setup-production.sh || true
          echo "‚úÖ Production setup completed"

      - name: Clean up old Docker images
        run: |
          echo "üßπ Cleaning up old Docker images..."
          docker image prune -f
          docker system prune -f
          echo "‚úÖ Cleanup completed"
