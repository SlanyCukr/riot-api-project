name: Deploy to RPI5 16GB

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to Production (RPI5 16GB)
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup deployment directory
        run: |
          echo "🔄 Setting up deployment directory..."

          # Stop containers first to release file locks
          if [ -d "/home/pi/riot-api" ]; then
            echo "Stopping existing containers..."
            cd /home/pi/riot-api
            docker compose -f compose.yaml -f compose.prod.yaml down 2>/dev/null || true
          fi

          # Remove old deployment directory (use sudo for Docker-owned files)
          sudo rm -rf /home/pi/riot-api

          # Copy new code
          mkdir -p /home/pi
          cp -r /home/pi/actions-runner/_work/riot-api-project/riot-api-project /home/pi/riot-api

          echo "✅ Repository copied to /home/pi/riot-api"

      - name: Generate .env file from secrets
        run: |
          cd /home/pi/riot-api
          echo "🔐 Generating .env file from GitHub secrets..."
          cat > .env << 'EOF'
          # Riot API Configuration
          RIOT_API_KEY=${{ secrets.RIOT_API_KEY }}
          RIOT_REGION=europe
          RIOT_PLATFORM=eun1

          # Database Configuration
          POSTGRES_DB=riot_api_db
          POSTGRES_USER=riot_api_user
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          DATABASE_URL=postgresql://riot_api_user:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/riot_api_db

          # Database Pool Configuration
          DB_POOL_SIZE=10
          DB_MAX_OVERFLOW=20
          DB_POOL_TIMEOUT=30
          DB_POOL_RECYCLE=1800

          # Job Scheduler Configuration
          JOB_SCHEDULER_ENABLED=true
          JOB_INTERVAL_SECONDS=120
          JOB_TIMEOUT_SECONDS=90
          MAX_TRACKED_PLAYERS=10

          # Application Configuration
          LOG_LEVEL=INFO

          # Frontend Configuration
          NEXT_PUBLIC_API_URL=https://leagueyespy.com
          NODE_ENV=production

          # CORS Configuration
          CORS_ORIGINS=https://leagueyespy.com,https://www.leagueyespy.com

          # Docker Configuration
          COMPOSE_PROJECT_NAME=riot_api_app
          BACKEND_PORT=8086
          FRONTEND_PORT=8088
          POSTGRES_PORT=5433
          EOF
          echo "✅ .env file generated successfully"

      - name: Deploy production environment
        run: |
          cd /home/pi/riot-api

          echo "🚀 Deploying production environment..."
          echo "⏱️  Build started at: $(date '+%Y-%m-%d %H:%M:%S')"
          BUILD_START=$(date +%s)

          # Build images with Docker Bake (parallel backend + frontend builds)
          echo "🔨 Building containers with Docker Bake..."
          if ! NEXT_PUBLIC_API_URL=https://leagueyespy.com docker buildx bake -f docker/docker-bake.hcl prod --load 2>&1 | tee build.log; then
            BUILD_END=$(date +%s)
            BUILD_DURATION=$((BUILD_END - BUILD_START))

            echo ""
            echo "❌ Deployment failed after ${BUILD_DURATION}s"
            echo "=== Build Environment Info ==="
            echo "Raspberry Pi Model: $(cat /proc/device-tree/model 2>/dev/null || echo 'Unknown')"
            echo "Memory: $(free -h | grep Mem | awk '{print $2 " total, " $3 " used, " $4 " available"}')"
            echo "Disk: $(df -h /home/pi | tail -1 | awk '{print $2 " total, " $3 " used, " $4 " available"}')"
            echo ""
            echo "=== Last 100 lines of build output ==="
            tail -100 build.log
            echo ""
            echo "=== Container Status ==="
            docker compose -f compose.yaml -f compose.prod.yaml ps 2>&1 || true
            echo ""
            echo "=== Docker System Info ==="
            docker system df || true
            exit 1
          fi

          BUILD_END=$(date +%s)
          BUILD_DURATION=$((BUILD_END - BUILD_START))
          echo ""
          echo "✅ Build completed successfully in ${BUILD_DURATION}s ($(($BUILD_DURATION / 60))m $(($BUILD_DURATION % 60))s)"

          # Start production services
          echo "🚀 Starting production services..."
          docker compose -f compose.yaml -f compose.prod.yaml up -d

      - name: Wait for services to start
        run: |
          echo "⏳ Waiting for services to start..."
          sleep 10

      - name: Verify deployment
        run: |
          cd /home/pi/riot-api
          echo "📊 Container status:"
          docker compose -f compose.yaml -f compose.prod.yaml ps

          echo ""
          echo "🔍 Running health checks..."
          echo ""

          # Test PostgreSQL connectivity with retries
          echo "🗄️  Testing PostgreSQL connectivity..."
          for i in {1..10}; do
            if docker compose -f compose.yaml -f compose.prod.yaml exec -T postgres pg_isready -U riot_api_user -d riot_api_db 2>/dev/null; then
              echo "✅ PostgreSQL is ready"
              break
            else
              echo "⏳ Attempt $i/10: PostgreSQL not ready yet, waiting..."
              sleep 3
            fi
            if [ $i -eq 10 ]; then
              echo "❌ PostgreSQL not ready after 10 attempts"
              echo ""
              echo "=== PostgreSQL Container Status ==="
              docker compose -f compose.yaml -f compose.prod.yaml ps postgres
              echo ""
              echo "=== PostgreSQL Logs ==="
              docker compose -f compose.yaml -f compose.prod.yaml logs --tail=50 postgres
              exit 1
            fi
          done
          echo ""

          # Test backend API health endpoint
          echo "🔍 Testing Backend API health endpoint..."
          for i in {1..10}; do
            if curl -f -s http://localhost:8086/health > /dev/null; then
              echo "✅ Backend API health check passed"
              break
            else
              echo "⏳ Attempt $i/10: Backend API not ready yet, waiting..."
              sleep 5
            fi
            if [ $i -eq 10 ]; then
              echo "❌ Backend API health check failed after 10 attempts"
              echo "Debug: Container logs"
              docker compose -f compose.yaml -f compose.prod.yaml logs --tail=50 backend
              exit 1
            fi
          done

          # Test frontend accessibility
          echo "🔍 Testing Frontend accessibility..."
          for i in {1..10}; do
            if curl -f -s http://localhost:8088 > /dev/null; then
              echo "✅ Frontend accessible"
              break
            else
              echo "⏳ Attempt $i/10: Frontend not ready yet, waiting..."
              sleep 5
            fi
            if [ $i -eq 10 ]; then
              echo "❌ Frontend not accessible after 10 attempts"
              echo "Debug: Container logs"
              docker compose -f compose.yaml -f compose.prod.yaml logs --tail=50 frontend
              exit 1
            fi
          done

          echo "🎉 All health checks passed!"

      - name: Show deployment info
        run: |
          cd /home/pi/riot-api

          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎉 Riot API Project Successfully Deployed!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "🌐 Service URLs:"
          echo "   Production:  https://leagueyespy.com"
          echo "   Backend API: http://localhost:8086"
          echo "   Frontend:    http://localhost:8088"
          echo ""
          echo "💻 Platform:"
          echo "   Device:      Raspberry Pi 5"
          echo "   Memory:      16GB RAM"
          echo "   Storage:     2TB SSD"
          echo "   Deployment:  $(date '+%Y-%m-%d %H:%M:%S')"
          echo ""
          echo "📊 Container Status:"
          docker compose -f compose.yaml -f compose.prod.yaml ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Clean up old Docker images
        run: |
          echo "🧹 Cleaning up unused Docker images..."
          echo "Storage before cleanup:"
          docker system df

          # Only remove dangling images (not used by any container)
          docker image prune -f

          echo ""
          echo "Storage after cleanup:"
          docker system df
          echo "✅ Cleanup completed"
