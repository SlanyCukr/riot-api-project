name: Reset Database

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "RESET" to confirm database reset (⚠️ DESTRUCTIVE - deletes all data!)'
        required: true
        type: string

concurrency:
  group: reset-database
  cancel-in-progress: false

jobs:
  reset-database:
    name: Reset Production Database
    runs-on: self-hosted
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "RESET" ]; then
            echo "❌ Confirmation failed. You must type 'RESET' to proceed."
            exit 1
          fi
          echo "✅ Confirmation validated"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment directory
        run: |
          echo "🔄 Setting up deployment directory..."
          cd /home/pi/riot-api
          git pull origin main || true
          echo "✅ Repository updated"

      - name: Reset database
        run: |
          cd /home/pi/riot-api
          echo "⚠️  Resetting database..."
          echo "⚠️  This will DELETE ALL DATA in the database!"

          chmod +x scripts/prod.sh

          # Use prod.sh with --reset-db flag (automatically answers 'yes')
          yes | ./scripts/prod.sh --reset-db || true

          echo "✅ Database reset completed"

      - name: Restart services
        run: |
          cd /home/pi/riot-api
          echo "🔄 Restarting services after database reset..."
          ./scripts/prod.sh

          echo "✅ Services restarted"

      - name: Wait for services to start
        run: |
          echo "⏳ Waiting for services to start..."
          sleep 30

      - name: Verify services
        run: |
          cd /home/pi/riot-api
          echo "📊 Verifying services..."

          # Check container status
          docker compose -f docker/docker-compose.yml -f docker/docker-compose.prod.yml ps

          # Test PostgreSQL connectivity
          echo "🗄️  Testing PostgreSQL connectivity..."
          if docker compose -f docker/docker-compose.yml -f docker/docker-compose.prod.yml exec -T postgres pg_isready -U riot_api_user -d riot_api_db; then
            echo "✅ PostgreSQL is ready"
          else
            echo "❌ PostgreSQL not ready"
            exit 1
          fi

          # Test backend API health endpoint
          echo "🔍 Testing Backend API..."
          for i in {1..10}; do
            if curl -f -s http://localhost:8086/health > /dev/null; then
              echo "✅ Backend API is healthy"
              break
            else
              echo "⏳ Attempt $i/10: Backend API not ready yet, waiting..."
              sleep 5
            fi
            if [ $i -eq 10 ]; then
              echo "❌ Backend API health check failed"
              docker compose -f docker/docker-compose.yml -f docker/docker-compose.prod.yml logs --tail=50 backend
              exit 1
            fi
          done

          echo "🎉 All services verified successfully!"

      - name: Show completion message
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Database reset completed successfully!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "🔄 All tables have been recreated from SQLAlchemy models"
          echo "🚀 Services are running and healthy"
          echo ""
          echo "⚠️  Note: All previous data has been permanently deleted"
          echo ""
